#--- Stats/Profiling output ---------------------------------------------------

logging        = true                      # Toggle logging output
console        = true                      # Toggle if logging out goes to console or log file
log_file       = log.txt                   # Name of log file
output_path    = ./output                  # File path for demo/application output

verbose        = false                     # Toggle verbose output
profiling      = false                     # Toggle profiling
silent_threads = true                      # true for no console output for threads, false for debugging in single-threaded case (number_of_subdomains = 1)


#--- Input Data (test scene) -------------------------------------------------

input_filename = breast.msh    # Mesh input file

no_ears     =  false           # Toogle if ears are allowed or not in the input mesh

input_labels  = 9 16 23 33     # Number of labels to consider in the input mesh (there could be more in the input data, but they are do not cares)
labels        = 3 1 2 0        # Number of elements same as input_labels, sequence maps to same sequence in input_labels
use_ambient   = true           # Could be false, ambient phase can't have any attributes associated with it
ambient_label = 0              # Must be a grit_label

#--- Simulation Loop Control ------------------------------------------------
fps  = 30                              # Frames per second for rendering svg files
loop = fixed                           # The type of simulation loop. Can be either
                                       # fixed or fps. First means frames are rendered
                                       # after each time-step. Second means frames
                                       # are rendered with specified frames per second
                                       # (hence multiple sub-steps can be taken between
                                       # rendered frames).
total_time = 10                        # Number of seconds to run simulation (simulated
                                       # time not wall clock time). Only used for fps loop
frames = 10                            # Number of frames (simulation steps) to take, only
                                       # used for fixed loop
skip_frames = 1                        # Number of inbetween frames to skip when rendering
                                       # frames, only used for fixed loop

#--- Model parameters --------------------------------------------------------
E    = 5000.0                          # Young modulos
nu   = 0.25                             # Poisson ratio
rho0 = 100                              # Material space mass density
g    = 9.8                              # Acceleration of gravity
c    = 0.1                              # Viscous linear velocity damping

#--- Simulation Toggles -----------------------------------------------------

use_dirichlet  = false                 # Toggles Dirichlet conditions
use_traction   = false                 # Toggles Traction conditions
use_gravity    = true                  # Toggles gravity forces
use_damping    = true                   # Toggles damping forces
use_elasticity = true                   # Toggles elasticity forces

#--- Stats/Profiling output ---------------------------------------------------
write_data    = false                  # If true then write simulation data to matlab script(s)
data_append   = true                   # If false then data for each time-step is written
                                       # to individual matlab script files. If true all
                                       # data are written to one matlab script file					
data_filename = data.m                 # Name of matlab script file to write data into
data_output_path = ./output            # The output folder to place data from simulator into

#--- Time Integration Controls -----------------------------------------------
integrator                  = semi_implicit     # This can be semi_implicit, adaptive
dt                          = 0.001             # Fixed time-step size
max_time_step               = 0.0005            # For controlling maximum available time step size in adaptive time stepping
min_time_step               = 0.00001           # For controlling minimum available time step size in adaptive time stepping
time_step_halving_tolerance = 0.0001            # Tolerance for halving time step size
time_step_doubling_count    = 5                 # Number of time steps to run before trying to double time-step size


#--- Engine control ------------------------------------------------------

number_of_subdomains      = 1               # Number of subdomains (threads)
make_unit                 = false           # Toggle to scale the domain to unit square
scheduler.max_iterations  = 4               # Maximum number of scheduler iterations per time-step
algorithm.max_iterations  = 10              # Maximum number of algorithm iterations (to prevent infinite loops)
use_only_interface        = false           # If true, only interface is affected

#
# syntax operations = [vertex_split] [move] [merge] [coarsening] [interface_coarsening] [refinement] [interface_refinement] [smoothing] [interface_smoothing] [optimization]
#
# This statement is essentially a white space separated list of named operations the engine performs
# when updating the mesh in-between simulation steps. If a named operation is omitted then the
# engine will not perform that operation.
#
operations = vertex_split move merge coarsening interface_coarsening refinement interface_refinement smoothing interface_smoothing optimization ear_removal

#
# Here we import specific settings into named scopes.
#
# Import syntax: import [scope_name]  =  cfg-file
#
# The "import" terminal is a keyword that tells the cfg-parser to start reading
# in a another cfg-file. This is convenient to have hierarchical
# cfg-files to better logical collect similar settings in a
# logical meaningful way.
#
# The optional field scope_name when specified will create a new named scope to store the 
# cfg-file into. The value of  "scope_name" identifies the internal name
# in the cfg-parser stores the imported settings under. The name only has meaning
# to manipulate settings in the actual cfg-files
#
#  If the scope_name is omitted then the import is done into the current scope. Redundant
#  settings in same scope do not overwrite previous settings, but rather creates
#  a list instead.
#
#    myvar = one
#    myvar = two
#
#  Behaves like
#
#    myvar = one two
#
#

import params_vertex_split         = remeshing_params/vertex_split.cfg
import params_move                 = remeshing_params/move.cfg
import params_merge                = remeshing_params/merge.cfg
import params_coarsening           = remeshing_params/coarsening.cfg
import params_interface_coarsening = remeshing_params/interface_coarsening.cfg
import params_refinement           = remeshing_params/refinement.cfg
import params_interface_refinement = remeshing_params/interface_refinement.cfg
import params_smoothing            = remeshing_params/smoothing.cfg        # Laplacian smoothing of non-interface vertices
import params_interface_smoothing  = remeshing_params/interface_smoothing.cfg
import params_optimization         = remeshing_params/optimization.cfg     # edge flip optimization

#
# syntax: assign = operation_name label_value scope_name;
#
# This statement assigns cfg settings for a specific operation and phase. This
# is for instance convenient if settings varies in different phases. Like
# having a coarse mesh in ambient phase but fine meshes elsewhere.
#
# The field operation name must be among the names given in the
# operations statement. The field scope_name must correspond to a
# scope created by a import statement.
#
assign = vertex_split         0 params_vertex_split
assign = vertex_split         1 params_vertex_split
assign = vertex_split         2 params_vertex_split
assign = vertex_split         3 params_vertex_split

assign = move                 1 params_move
assign = move                 2 params_move
assign = move                 3 params_move

assign = merge                0 params_merge
assign = merge                1 params_merge
assign = merge                2 params_merge
assign = merge                3 params_merge

assign = coarsening           0 params_coarsening
assign = coarsening           1 params_coarsening
assign = coarsening           2 params_coarsening
assign = coarsening           3 params_coarsening

assign = interface_coarsening 0 params_interface_coarsening
assign = interface_coarsening 1 params_interface_coarsening
assign = interface_coarsening 2 params_interface_coarsening
assign = interface_coarsening 3 params_interface_coarsening

assign = refinement           0 params_refinement
assign = refinement           1 params_refinement
assign = refinement           2 params_refinement
assign = refinement           3 params_refinement

assign = interface_refinement 0 params_interface_refinement
assign = interface_refinement 1 params_interface_refinement
assign = interface_refinement 2 params_interface_refinement
assign = interface_refinement 3 params_interface_refinement

assign = smoothing            0 params_smoothing
assign = smoothing            1 params_smoothing
assign = smoothing            2 params_smoothing
assign = smoothing            3 params_smoothing

assign = interface_smoothing  0 params_interface_smoothing
assign = interface_smoothing  1 params_interface_smoothing
assign = interface_smoothing  2 params_interface_smoothing
assign = interface_smoothing  3 params_interface_smoothing

assign = optimization         0 params_optimization
assign = optimization         1 params_optimization
assign = optimization         2 params_optimization
assign = optimization         3 params_optimization

#
#syntax: override = operation_name label_value parameter_name parameter_value
#
# The override statement is convenient when re-using cfg file scopes. Say
# that for a particular application one only wishes to change one parameter
# for one operation in a particular phase...but re-use the same settings
# everywhere else. The override statement allows one to specify what parameters
# should be changed.
#
#
override = ear_removal          0 max_iterations   1
override = ear_removal          1 max_iterations   1
override = ear_removal          2 max_iterations   1
override = ear_removal          3 max_iterations   1

override = interface_refinement 0 max_iterations   0        # Turn off interface refinement for ambient space
override = interface_coarsening 0 max_iterations   0        # Turn off interface refinement for ambient space


override = interface_refinement 1 lower_threshold  0.5      # This is upper compression plate
override = interface_coarsening 1 upper_threshold  0.001
override = refinement           1 lower_threshold  0.5
override = coarsening           1 upper_threshold  0.001

override = interface_refinement 2 lower_threshold  0.5      # This is lower compression plate
override = interface_coarsening 2 upper_threshold  0.001
override = refinement           2 lower_threshold  0.5
override = coarsening           2 upper_threshold  0.001


override = interface_refinement 3 lower_threshold  0.1     # This is object phase
override = interface_coarsening 3 upper_threshold  0.01
override = refinement           3 lower_threshold  0.1
override = coarsening           3 upper_threshold  0.01




